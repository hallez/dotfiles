#!/usr/bin/env bash
#
# Bash it
#
# This install Bash-it, the community bash framework.

set -euf -o pipefail

my_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

bashit_dir="${HOME}/.bash_it"

aliases_file="${my_dir}/aliases"
completions_file="${my_dir}/completions"
plugins_file="${my_dir}/plugins"

if [[ ! -e "${bashit_dir}" ]]; then
  echo "  Cloning Bash it."
  git clone https://github.com/Bash-it/bash-it.git "${bashit_dir}"
else
  echo "  Updating Bash it."
  pushd "${bashit_dir}"
    git pull
  popd
fi

echo "  Installing Bash it."
pushd "${bashit_dir}"
  # the install script sometimes fails for reasons outside of our control,
  # in ways that doesn't affect the rest of the process, but would trigger the
  # pipefail option (yes would receive the bad signal from ./install.sh and fail
  set +o pipefail
  yes | ./install.sh
  set -o pipefail
popd

set +u

set +ef
# Shellcheck does not like following non-constant source.
# shellcheck disable=SC1090
source "${HOME}/.bash_profile"
set -e

while read -r completion; do
    [[ -z "${completion}" ]] && continue

    echo "  Enabling completion: ${completion}."
    bash-it enable completion "${completion}"
done < "${completions_file}"

while read -r alias; do
    [[ -z "${alias}" ]] && continue

    echo "  Enabling alias: ${alias}."
    bash-it enable alias "${alias}"
done < "${aliases_file}"

while read -r plugin; do
    [[ -z "${plugin}" ]] && continue

    echo "  Enabling plugin: ${plugin}."
    bash-it enable plugin "${plugin}"
done < "${plugins_file}"

rm -rf "${HOME}/.inputrc"
ln -s "${my_dir}/.inputrc" "${HOME}/.inputrc"
echo "  Installing custom bash aliases etc - done."

echo -en "\e[36mInstalling custom bash scripts...\e[39m "
rm "${HOME}/.bash_it/custom/"*
cp "${my_dir}/custom/"* "${HOME}/.bash_it/custom/"
echo -e "\e[32mdone\e[39m"
